//TO DO: Build group dashboard pageimport Head from "next/head";
import { useRouter } from "next/router";
import { withIronSessionSsr } from "iron-session/next";
import sessionOptions from "../config/session";
import db from '../db'
import Head from 'next/head';
import Header from "../components/header";
import Footer from "../components/footer";
import styles from "../styles/booth.module.css"



export const getServerSideProps = withIronSessionSsr (
  async function getServerSideProps({ req, query }) {
    
    const props = {};

    //Get active user session information
    const user = req.session.user;
    if (user) {
      props.user = req.session.user;
      props.isLoggedIn = true;
    } else {
      props.isLoggedIn = false;
    }

    //GET Member/User Info
    const groupId = query.g
    const boothId = query.b

    console.log("boothId: ", boothId)

    props.groupId = groupId

    const booth = await db.booth.getBoothById(boothId)

    if (!booth) {
      return {
        redirect: {
          permanent: false,
          destination: (`/group/${groupId}`),
        },
        props:{},
      };
    }


    const boothDetails = JSON.parse(JSON.stringify(booth))

    if(boothDetails !== null){
      props.booth = boothDetails
    }

    console.log("BOOTH DETAILS: ", boothDetails)
    
    return { props };
  },
  sessionOptions
);




export default function BoothPage(props) {
  const router = useRouter();
  const menuType = "group"
   const pageTitle = "Booth Details"

  const groupId = props.groupId
  const userFirstName = props.user.firstName
  const userLastName = props.user.lastName

  const boothId = props.booth.id

  async function deleteBooth(e) {
    e.preventDefault()
    const res = await fetch(`/api/booth`, {
      method: 'DELETE',
      headers: 
      {
        "content-type": "application/json",
      },
      body: JSON.stringify({groupId, boothId})
    })

    // Call router.replace(router.asPath) if you receive a 200 status
    if (res.status === 200) {
      router.replace(router.asPath)
    }  
  }

  
  async function boothSignUp(e) {
    e.preventDefault()
    const res = await fetch(`/api/booth/attendee`, {
      method: 'POST',
      headers: 
      {
        "content-type": "application/json",
      },
      body: JSON.stringify({userFirstName, userLastName, groupId, boothId})
    })

    // Call router.replace(router.asPath) if you receive a 200 status
    if (res.status === 200) {
      router.replace(router.asPath)
    }  
  }



  return (
    <div >
      <Head>
        <title>My Cookie Jar</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header isLoggedIn={props.isLoggedIn} username={props?.user?.username} menu={menuType} pageTitle={pageTitle} groupId={props.groupId}/>


      <main className={styles.main}>

        <div className={styles.button}>
          <a onClick={deleteBooth} style={{ cursor: 'pointer', fontSize : 16 }}>Delete Booth</a> 
        </div>

        <div className={styles.mainContainer}>

          <div className={styles.detailsSection}>
            <p className={styles.locationName}> {props.booth.locationName}</p>
            <p className={styles.dateTime}> {props.booth.date}</p>
            <p className={styles.dateTime}> {props.booth.time}{props.booth.amPM}</p>
          </div>

          <div className={styles.shiftSection }>
            <div className={styles.shiftSignUp}>
              <p> {props.booth.shifts} Shifts Available </p>
              <div className={styles.signUpButton}>
                <a onClick={boothSignUp} style={{ cursor: 'pointer', fontSize : 16 }}>Sign Up</a> 
            </div>
            </div>
            <div>
              <p>Scheduled Members:</p>

              {props.booth.attendingMembers.length ? (
              <>
                {props.booth.attendingMembers.map((member, i) => (
                  <Attendees 
                    key={i}
                    attendeeId={member.memberId}
                    firstName={member.memberFirstName} 
                    lastName={member.memberLastName} 
                  >  
                  </Attendees>
                ))}
              </>
              ):( 
              <>
                <p >No attendees yet!</p>
              </>
            )}

            </div>
        
          </div>



          <div className={styles.locationSection}>
             <div className={styles.address }>
              <p> {props.booth.address}, </p>
              <p> {props.booth.city}, {props.booth.state}</p>
            </div>

            <iframe
              title="map of location"
              width="250"
              height="250"
              loading="lazy"
              allowFullScreen
              referrerPolicy="no-referrer-when-downgrade"
              src={`https://www.google.com/maps/embed/v1/place?key=${process.env.NEXT_PUBLIC_API_KEY}&q=${props.booth.address}+${props.booth.city}+${props.booth.state}`}>
            </iframe>

          </div>
            

          <div className={styles.notesSection}>
            <p className={styles.notesHeader}> Important Notes:</p>
            <p> {props.booth.notes}</p>
          </div>
            
        </div >   

      </main>

      <Footer/>

    </div>      
   );         
}

function Attendees({firstName, lastName}) {


  return (
        <div>
          <p>{firstName} {lastName}</p>
        </div>  
    
  )
}
