//TO DO: Build group dashboard pageimport Head from "next/head";
import { useRouter } from "next/router";
import { withIronSessionSsr } from "iron-session/next";
import sessionOptions from "../../config/session";
import db from '../../db'
import Link from "next/link";
import Head from 'next/head';
import Header from "../../components/header";
import Footer from "../../components/footer";
import styles from "../../styles/groupMain.module.css"




export const getServerSideProps = withIronSessionSsr (
  async function getServerSideProps({ req, params }) {

    const props = {};

    //Get user session information
    const user = req.session.user;
    if (user) {
      props.user = req.session.user;
      props.isLoggedIn = true;
    } else {
      props.isLoggedIn = false;
    }

    //TO DO: Get user groups 
    // const group = await db.group.getGroupById(user._id, params.id)
    const group = await db.group.getGroupById(params.id)
    const groupConverted = JSON.parse(JSON.stringify(group))

    //check if user is member
    const member = await db.group.getMemberByUserId(groupConverted.id, user._id)
    if (!member) {
        return {
          redirect: {
            permanent: false,
            destination: "/dashboard",
          },
          props:{},
        };
    }

    


    //TO DO: Parsing turns it to Javascript to read in browser


    if(group !== null){
        props.group = groupConverted
      }
      
    return { props };
  },
  sessionOptions 
);


export default function GroupPage(props) {
  const router = useRouter();
  const menuType = "group"
  const pageTitle = `${props.group.groupName}`

  const groupId = props.group.id
  console.log("groupId: ", groupId)

  const userId = props.user._id
  console.log("user: ", userId)

  async function leaveGroup(e) {
    e.preventDefault()
    const res = await fetch(`/api/user`, {
      method: 'DELETE',
      headers: 
      {
        "content-type": "application/json",
      },
      body: JSON.stringify({userId, groupId})
    })

    // Call router.replace(router.asPath) if you receive a 200 status
    if (res.status === 200) {
      router.replace(router.asPath)
    }  
  }


  return (
    <div >
      <Head>
        <title>My Cookie Jar</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header isLoggedIn={props.isLoggedIn} username={props?.user?.username} menu={menuType} pageTitle={pageTitle} groupId={props.group.id}/>

      <main className={styles.main}>

        <h1> My Groups</h1>
        
        <div className={styles.mainContainer}>
          
          <div className={styles.button}>
            <Link href={`/membersList/${props.group.id}`}>Group Member List</Link>
          </div> 

          <div className={styles.button}>
            <Link href={`/boothList/${props.group.id}`}>Troop Booth List</Link>
          </div>   

          <div className={styles.button}>
            <Link href={`/inventory/${props.group.id}`}>Cookie Inventory</Link>
          </div> 

          <div className={styles.button}>
            <a onClick={leaveGroup} style={{ cursor: 'pointer', fontSize : 16, }}>Leave Group</a> 
          </div>

          
        </div>


      </main>

      <Footer/>

    </div>      
   );         
}


