//TO DO: Build group dashboard pageimport Head from "next/head";
import { useRouter } from "next/router";
import { withIronSessionSsr } from "iron-session/next";
import sessionOptions from "../../config/session";
import db from '../../db'
import Head from 'next/head';
import Header from "../../components/header";
import Footer from "../../components/footer";


export const getServerSideProps = withIronSessionSsr (
  async function getServerSideProps({ req, params }) {

    const props = {};

    //Get user session information
    const user = req.session.user;
    if (user) {
      props.user = req.session.user;
      props.isLoggedIn = true;
    } else {
      props.isLoggedIn = false;
    }

    //TO DO: Get user groups 
    // const group = await db.group.getGroupById(user._id, params.id)
    const booth = await db.booth.getBoothById(params.id)

    const boothConverted = JSON.parse(JSON.stringify(booth))


    if(booth !== null){
        props.booth = boothConverted
      }
      
    return { props };
  },
  sessionOptions
);




export default function BoothPage(props) {
  const router = useRouter();

  return (
    <div >
      <Head>
        <title>My Cookie Jar</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header isLoggedIn={props.isLoggedIn} username={props?.user?.username} />

      <main >
        <div>
          <h1 >
            BOOTH PAGE
          </h1>
        </div>

        <div>
          <h1>User Info</h1> 
          <h3>User ID:</h3>
          <p>{props.user._id}</p>
          <h1>Group Id: </h1>
          <p> {props.booth.groupId}</p>
          <h3>Location: </h3>
          <p> {props.booth.locationName}</p>
          <h3>Date: </h3>
          <p> {props.booth.date}</p>
          <h3>Time: </h3>
          <p> {props.booth.time}</p>
          <h3>Time of day </h3>
          <p> {props.booth.amPM}</p>
          <h3>Number of shifts: </h3>
          <p> {props.booth.shifts}</p>
          <h3>Address: </h3>
          <p> {props.booth.address}</p>
          <h3>City: </h3>
          <p> {props.booth.city}</p>
          <h3>State: </h3>
          <p> {props.booth.state}</p>

        </div>

        <div>
          <h1>Booth Notes</h1>
          {(props.booth.notes!= " ")? (
            <>
              <p>{props.booth.notes}</p>
            </>
            ):( 
            <>
              <p >No booth notes yet!</p>
            </>
          )}
        </div>

        <div>
          <h1>Booth Attendees</h1>
          {props.booth.attendingMembers.length ? (
            <>
              {props.booth.attendingMembers.map((attendee, i) => (
                <BoothAttendee 
                  key={i}
                  memberId={attendee.memberId} 
                  attendeeId={attendee._id}>
                </BoothAttendee >
              ))}
            </>
            ):( 
              <>
                <p >No attendees yet!</p>
              </>
          )}
        </div>



      </main>

      <Footer/>

    </div>      
   );         
}


function BoothAttendee({memberId, attendeeId}) {

  return (
    <div>
        <h2>Member#</h2>
        <p>{memberId}</p>
        <h2>AttendeeId</h2>
        <p>{attendeeId}</p>

    </div>  
    
  )
}
