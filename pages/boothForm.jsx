import Head from "next/head";
import Header from "../components/header";
import Footer from "../components/footer";
import { useRouter } from "next/router";
import { useState } from "react";
import { withIronSessionSsr } from "iron-session/next";
import sessionOptions from "../config/session";


export const getServerSideProps = withIronSessionSsr (
    async function getServerSideProps({ req, query }) {
  
      const props = {}

        const groupId = query.g
        props.groupId = groupId

  
      //Get user session information
      const user = req.session.user;
      if (user) {
        props.user = req.session.user;
        props.isLoggedIn = true;
      } else {
          return {
            redirect: {
              permanent: false,
              destination: "/",
            },
            props:{},
          };
      }
  
      return { props };
    },
    sessionOptions
);

export default function CreateGroup(props) {
    const router = useRouter();
    const menuType = "group"
    const groupId = props.groupId

    const [
      {
        locationName,
        date,
        time,
        amPM,
        shifts,
        address,
        city,
        state,
        notes
      },

      setForm,
    ] = useState({
      locationName: "",
      date: "",
      time: "",
      amPM: "",
      shifts: "",
      address: "",
      city: "",
      state: "",
      notes: "",
    });
    const [error, setError] = useState("");
  
    function handleChange(e) {
      setForm({
        locationName,
        date,
        time,
        amPM,
        shifts,
        address,
        city,
        state,
        notes,
        ...{ [e.target.name]: e.target.value.trim() },
      });
    }
    async function handleCreateAccount(e) {
      e.preventDefault();
    //   if (!groupName) return setError("Must include group name");
    //   if (groupCode !== confirmCode) return setError("Passwords must Match");
  
      try {
        const res = await fetch("/api/booth", {
          method: "POST",
          headers: {
            "content-type": "application/json",
          },
          body: JSON.stringify({
            groupId,
            locationName,
            date,
            time,
            amPM,
            shifts,
            address,
            city,
            state,
            notes,
            }),
        });
        if (res.status === 200) return router.push("/group/" + groupId);
        const { error: message } = await res.json();
        setError(message);
      } catch (err) {
        console.log(err);
      }
    }


    return (
      <div >
        <Head>
          <title>Add New Booth</title>
          <meta name="description" content="Generated by create next app" />
        </Head>
  
        <Header isLoggedIn={props.isLoggedIn}  menu={menuType}/>
  
        <main>
          <h1>
            Create New Booth
          </h1>

          

  
  
          <form
            onSubmit={handleCreateAccount}
          >
            <div>
              <label htmlFor="locationName">Location Name: </label>
              <input
                type="text"
                name="locationName"
                id="locationName"
                onChange={handleChange}
                value={locationName}
              />
            </div>

  
            <div>
              <label htmlFor="date">Date: (mm/yy): </label>
              <input
                type="text"
                name="date"
                id="date"
                onChange={handleChange}
                value={date}
              />
            </div>
          
  
            <div>
              <label htmlFor="time">Time:: </label>
              <input
                type="text"
                name="time"
                id="time"
                onChange={handleChange}
                value={time}
              /> 
            </div>         

            <div>
              <label htmlFor="amPM">am/pm: </label>
              <input
                type="text"
                name="amPM"
                id="amPM"
                onChange={handleChange}
                value={amPM}
              />
            </div>
            

            <div>
              <label htmlFor="shifts">Number of Shiifts: </label>
              <input
                type="text"
                name="shifts"
                id="shifts"
                onChange={handleChange}
                value={shifts}
              />
            </div>
        
  
            <div>
              <label htmlFor="address">Street Address: </label>
              <input
                type="text"
                name="address"
                id="address"
                onChange={handleChange}
                value={address}
              />
            </div>
        

            <div>
              <label htmlFor="city">City: </label>
              <input
                type="text"
                name="city"
                id="city"
                onChange={handleChange}
                value={city}
              />
            </div>
          

            <div>
              <label htmlFor="state">State: </label>
              <input
                type="text"
                name="state"
                id="state"
                onChange={handleChange}
                value={state}
              />
            </div>
           

            <div>
              <label htmlFor="notes">Notes: </label>
              <input
                type="text"
                name="notes"
                id="notes"
                onChange={handleChange}
                value={notes}
              />
            </div>
            
  
            <button>Submit</button>
            <button>
              <a href={`/group/${groupId}`}>Cancel</a>
            </button>
            {error && <p>{error}</p>}

          </form>
        </main>
  
        <Footer/>
      </div>
    );
  }